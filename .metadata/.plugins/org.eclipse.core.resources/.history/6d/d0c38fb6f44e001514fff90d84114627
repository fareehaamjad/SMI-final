package com.example.securemobileidentity;

import java.text.ParseException;
import java.util.ArrayList;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

public class KeyExchangeService extends BroadcastReceiver
{
	static ArrayList<ExchangeServiceParticipant> participants = new ArrayList<ExchangeServiceParticipant>();
	Context context;

	static ArrayList<Message> allMsgs = new ArrayList<Message>();

	@Override
	public void onReceive(Context con, Intent intent) 
	{
		context = con;

		//1- get all keys from the database
		//2- exchange keys with those which have shouldupdate key set to 1 or true &&
		//                         exchangeKeysTrying != true
		//3- get all messages from database to check for replies

		DatabaseHandler dbHandler = new DatabaseHandler(context);
		participants.clear();
		try 
		{
			dbHandler.getAllKeysService();
		} 
		catch (ParseException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		for (ExchangeServiceParticipant p: participants)
		{
			if (p.key_table.getShouldUpdate_b() && (!p.exchangeKeysTrying) )
			{
				p.exchangeKeysTrying = true;
				startExchange(p);
			}
		}

		try 
		{
			dbHandler.getAllTempMessages(allMsgs);
		} 
		catch (ParseException e) 
		{
			e.printStackTrace();
		}

		for (Message msg: allMsgs)
		{
			processMessage(msg);
		}

	}


	private void processMessage(Message msg) 
	{
		//check what the message is about
		String[] split = msg.message.split(Constants.separator);
		int index = 0;

		String header = split[index++];
		if (header.equals(Constants.HEADER_METADATA))
		{
			Log.i("metadata", "Got meta-data    " +msg.message);
			try 
			{
				ProcessMessage.replyMetadata(msg.message);
			} catch (Exception e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if (header.equals(Constants.HEADER_REPLY_METADATA))
		{
			
		}
		else if (header.equals(Constants.HEADER_VERIFY_META))
		{
			
		}
	}


	private void startExchange(ExchangeServiceParticipant p) 
	{
		p.exchangeKeysTrying = true;

		ProcessMessage.sendMetaData(context);
	}




}
