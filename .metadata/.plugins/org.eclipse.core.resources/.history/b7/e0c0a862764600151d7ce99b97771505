package com.example.securemobileidentity;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import android.content.Context;
import android.telephony.PhoneNumberUtils;
import android.text.format.Time;
import android.util.Log;

public class Constants 
{
	//preferences id strings
	public static String pref_phone_no = "phone number";
	public static String pref_server_no = "server number";
	public static String pref_KEY_imei = "imei";
	public static String pref_private_key = "Private key";
	public static String pref_public_key = "Public key";

	//messages to server
	public static String get_phone_no = "number";

	//public static String keywordsSeparator = ":";

	//flags
	public static boolean phone_no_response = false;
	public static boolean exchangeKeysTrying = false;
	public static boolean exchangesuccessful = false;
	public static boolean isChatOpen = false;

	public static ArrayList<String> allServerMsgs;

	public static Contact contactSelected;


	//protocol
	public static String separator= "`~~`";
	public static String HEADER_METADATA = "meta";
	public static String HEADER_REPLY_METADATA = "rep-meta";
	public static String HEADER_VERIFY_META = "verify-meta";
	
	public static String HEADER_MESSAGE = "SMI";

	public static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("E M d HH:mm z y");

	public static EncryptionManager encryptionManager;
	public static DatabaseHandler dbHandler;
	public static GPSTracker mGPS;

	public static enum UserType{ SELF, OTHER };

	//this array list should contain all messages of the opened chat
	public static ArrayList<Message> allMsgs = new ArrayList<Message>();


	//to limit number of handshakes per session
	public static ArrayList<Contact> contactsVisited = new ArrayList<Contact>();


	//logging
	public static final String LOGS_DIR 	= "/SMI/Logs/";
	public static String root 				= null;	
	public static final String APP_PACKAGE 			= " com.example.securemobileidentity";




	public static String getNonce() 
	{
		SecureRandom sr = new SecureRandom();
		byte[] _nonce = new byte[1024/8];
		sr.nextBytes(_nonce);

		return (_nonce.toString() + Constants.separator);
	}

	public static String getMetaData(String header) 
	{
		//phone No:
		String metadata = header;
		metadata += Constants.separator;
		metadata += MainActivity.s.getString(Constants.pref_phone_no, null);
		metadata += "--";

		//location
		if(mGPS.canGetLocation )
		{
			Double mLat = mGPS.getLatitude();
			Double mLong = mGPS.getLongitude();

			metadata += Double.toString(mLat);
			metadata += ":";
			metadata += Double.toString(mLong);
			metadata += "--";
		}
		else
		{
			metadata += "null:null--";
			Log.e("Location", "can't get the location");
		}

		//DateTime
		final Calendar c = Calendar.getInstance();
		int mYear = c.get(Calendar.YEAR);
		int mMonth = c.get(Calendar.MONTH);
		int mDay = c.get(Calendar.DAY_OF_MONTH);
		metadata += mDay+"-"+mMonth+"-"+mYear;
		metadata += ":";

		Time time = new Time();
		time.setToNow();
		metadata += time.hour+":"+time.minute;
		metadata += Constants.separator;

		Log.i("final meta data", metadata);

		return metadata;
	}


	public static String getPublicKey() 
	{
		return (encryptionManager.s.getString(Constants.pref_public_key, null)+Constants.separator);
	}

	public static Contact findContact(String number) 
	{
		Contact c = null;
		for (Contact con : MainActivity.allContacts)
		{
			if (PhoneNumberUtils.compare(con.number, number))
			{
				c = con;
				break;
			}
		}

		if (c == null)
		{
			c.name = number;
			c.number = number;
		}

		return c;
	}

	public static void writeToNewLine(Context ctx,String path, String content) 
	{
		File f = new File(path);
		content = "\n\n" +content;

		try {
			FileOutputStream fos = new FileOutputStream(f, true);
			fos.write(content.getBytes());
			fos.close();
		} catch (FileNotFoundException e) {
			Log.e("Crash log", e.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void createDirectories()
	{		
		File logs_dir = new File(Constants.root + Constants.LOGS_DIR);
		Log.i("Logs", Constants.root + Constants.LOGS_DIR);
		if (!logs_dir.exists() && !logs_dir.isDirectory())
		{
			logs_dir.mkdirs();
		}
	}

	public static boolean shouldStartExchange(Contact selContact) 
	{
		for (Contact c: contactsVisited)
		{
			if (PhoneNumberUtils.compare(c.number, selContact.number))
			{
				return false;
			}
		}
		
		return true;
	}

}
