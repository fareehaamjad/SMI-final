package com.example.securemobileidentity;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;

import org.apache.http.ParseException;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Handler;
import android.telephony.PhoneNumberUtils;
import android.util.Log;
import android.widget.Toast;

public class ProcessMessage 
{
	static String className = "ProcessMessage";

	public static void addMsg(final Message msg, EncryptionManager encryptionManager, DatabaseHandler dbHandler) throws Exception 
	{
		Log.i(className, msg.number);

		//check what the message is about
		String[] split = msg.message.split(Constants.separator);
		int index = 0;

		String header = split[index++];
		if (header.equals(Constants.HEADER_METADATA))
		{
			if (! Constants.exchangeKeysTrying )
			{
				Contact c = Constants.findContact(msg.number);

				Constants.contactsVisited.remove(c);

				new AlertDialog.Builder(Constants.currentContext)
				.setTitle("Handshake Request")
				.setMessage((c.name == null || c.name.equals("") ? c.number : c.name) + " would like to exchange keys with you. Would you like to continue?")
				.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() 
				{
					public void onClick(DialogInterface dialog, int which) 
					{ 
						Constants.exchangeKeysTrying = true;
						Log.i("metadata", "Got meta-data    " +msg.message);

						//send a reply: new metadata, new nonce, public key, public modulus, signed metadata + nonce of sender
						try 
						{
							replyMetadata(msg.message, Constants.currentContext, encryptionManager, dbHandler);
						} catch (Exception e) 
						{
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

						Constants.timeStart = System.nanoTime();
						Constants.contactSelected = Constants.findContact(msg.number);
						Intent intent = new Intent(MainActivity.context, SMSActivity.class);
						intent.putExtra("method","sms");
						MainActivity.context.startActivity(intent);
					}
				})
				.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() 
				{
					public void onClick(DialogInterface dialog, int which) 
					{ 
						// do nothing
					}
				})
				.setIcon(android.R.drawable.ic_dialog_alert)
				.show()
				.setCancelable(false);
			}
		}
		else if (header.equals(Constants.HEADER_REPLY_METADATA))
		{
			Log.i("reply metadata", "Got reply meta-data");
			Log.i("reply meta data msg", msg.message);
			//metadata
			String encryptMsg = split[index++];
			//publickey
			String publicKeyOfSender = split[index++];
			//nonce
			encryptMsg += ",";
			encryptMsg += split[index++];

			//the encrytpted challenge reply
			String encChallange = split[index++];
			Log.i("got encrypted challange",encChallange );

			String challenge = encryptionManager.decrypt(encChallange, publicKeyOfSender);

			String actualChallenge = getChallenge(msg.number, dbHandler);

			dbHandler.deleteChallange(msg.number);

			Log.i("challenge",challenge);
			Log.i("actual challenge", actualChallenge);

			if (actualChallenge.equals(challenge))
			{
				Log.i("equal", "the challenge and the challenge reply are equal");

				RreplyMetadata(encryptMsg, msg.number, Constants.currentContext, encryptionManager);
				//DisplayOptions.status.setText("Challenge equal!!");
				//MainActivity.exchangeKeys = true;
				//sendPicture(msg.number);
				//connectionText.setText("Connection established!");

				Constants.timeStart = 0;
				dbHandler.addNewKey(new TableKeys("-1", msg.number, publicKeyOfSender, Constants.SIMPLE_DATE_FORMAT.format(new Date()), "-1", "1", "0"));


				Constants.exchangesuccessful = true;
			}
			else
			{

				Constants.timeStart = 0;

				//DisplayOptions.status.setText("Challenge NOT equal!!");
				Log.i("not equal", "the challenge and the challenge reply are not equal");


				Constants.exchangesuccessful = false;
				//exchangeKeys = false;
			}


			Constants.exchangeKeysTrying = false;

		}
		else if (header.equals(Constants.HEADER_VERIFY_META))
		{
			Log.i("verify meta", "Got verify meta-data    "+msg.message);

			String encChallange = split[index++];

			String publicKey = dbHandler.getTempKey(msg.number);


			dbHandler.deleteTempKey(msg.number);
			String actualChallenge = getChallenge(msg.number, dbHandler);

			String challenge = encryptionManager.decrypt(encChallange, publicKey);

			dbHandler.deleteChallange(msg.number);

			Log.i("challenge",challenge);
			Log.i("actual challenge", actualChallenge);

			if (actualChallenge.equals(challenge))
			{
				Constants.timeStart = 0;
				Log.i("equal", "the challenge and the challenge reply are equal");

				//Toast.makeText(context,"Challenge equal!!", Toast.LENGTH_LONG).show();
				//MainActivity.exchangeKeys = true;
				//connectionText.setText("Connection established!");			
				dbHandler.addNewKey(new TableKeys("-1", msg.number, publicKey, Constants.SIMPLE_DATE_FORMAT.format(new Date()), "-1", "0", "0"));

				Constants.exchangesuccessful = true;

			}
			else
			{
				Constants.timeStart = 0;
				//Toast.makeText(context,"Challenge NOT equal!!", Toast.LENGTH_LONG).show();
				Log.i("not equal", "the challenge and the challenge reply are not equal");

				Constants.exchangesuccessful = false;
				//exchangeKeysTrying = false;
			}

			Constants.exchangeKeysTrying = false;


		}
		else
		{

			msg.message = split[index++];
			Log.i("got encrypted message", msg.message);

			// Vibrate for 500 milliseconds
			Constants.viberate.vibrate(500);

			String publicKey = Constants.getKey(msg.number);

			if (publicKey.equalsIgnoreCase("null"))
			{
				/*1- save message
				2- send handshake request
				3- retrieve message*/
				Contact c = Constants.findContact(msg.number);
				Constants.contactsVisited.remove(c);

				Constants.unread_unknown.add(msg);

				new AlertDialog.Builder(Constants.currentContext)
				.setTitle("Handshake Request")
				.setMessage((c.name == null || c.name.equals("") ? c.number : c.name) + " has sent you a message. Would you like to start key exchange?")
				.setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() 
				{
					public void onClick(DialogInterface dialog, int which) 
					{ 
						Constants.exchangeKeysTrying = true;
						Log.i("metadata", "Got meta-data    " +msg.message);

						//send a reply: new metadata, new nonce, public key, public modulus, signed metadata + nonce of sender
						try 
						{

							Constants.contactSelected = Constants.findContact(msg.number);
							Handler mHandler = new Handler();
							SMSActivity.exchangeKeys(mHandler, Constants.currentContext);
						} catch (Exception e) 
						{
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

						Constants.timeStart = System.nanoTime();
						Constants.contactSelected = Constants.findContact(msg.number);
						Intent intent = new Intent(MainActivity.context, SMSActivity.class);
						intent.putExtra("method","sms");
						MainActivity.context.startActivity(intent);
					}
				})
				.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() 
				{
					public void onClick(DialogInterface dialog, int which) 
					{ 
						// do nothing
					}
				})
				.setIcon(android.R.drawable.ic_dialog_alert)
				.show()
				.setCancelable(false);


			}
			else
			{
				String message =  encryptionManager.decrypt(msg.message, publicKey);

				Log.i("test", "The message is: " + message);

				Message msgRec = new Message();
				msgRec.message = message;
				msgRec.number = msg.number;
				msgRec.time = new Date();
				msgRec.type = Constants.UserType.OTHER;
				msgRec.isRead = false;

				dbHandler.addNewMsg(msgRec);

				if (Constants.isChatOpen)
				{
					Log.i("test", "chat is open");
					if (PhoneNumberUtils.compare(Constants.contactSelected.number, msgRec.number))
					{
						Log.i("test", "chat is open");
						Constants.allMsgs.add(msgRec);
						Log.i("test", "message is added");
						SMSActivity.adapter.notifyDataSetChanged();

						msgRec.isRead = true;
						dbHandler.updateStatusOfMsg(msgRec);
					}
				}

				if (Constants.isContactListOpen)
				{
					MainActivity.listAdapter.notifyDataSetChanged();
				}
			}




		}

	}

	//3rd
	static void RreplyMetadata(String encryptMsg, String number, Context context, EncryptionManager encryptionManager) throws Exception 
	{
		Log.i("This is what is being encrypted here", encryptMsg);
		//encrypt using the user's own public key
		String encoded = encryptionManager.encrypt(encryptMsg);
		Log.i("Encoded string", encoded);

		String msg = Constants.HEADER_VERIFY_META +Constants.separator + encoded;

		SendSMS.sendSMSMessage(msg, context, number);
		//sendLongSMS(msg, number) ;     
	}


	static String getChallenge(String number, DatabaseHandler dbHandler) 
	{
		return dbHandler.getChallenge(number);
	}

	//first step
	public static  void sendMetaData(final Context con, DatabaseHandler dbHandler) 
	{
		Constants.exchangeKeysTrying = true;
		//generating nonce
		String nonce = Constants.getNonce();

		//generating meta-data
		String metadata = Constants.getMetaData(Constants.HEADER_METADATA);

		//fetching public key and public modulus
		String publicKey = Constants.getPublicKey();

		//store challenge with number
		String metaD =  metadata.replace(Constants.HEADER_METADATA, "");

		Log.i("meta after replacing", metaD);

		String challenge = metaD + "," + nonce;
		challenge = challenge.replace(Constants.separator, "");

		final String challengeNo = Constants.contactSelected.number;
		dbHandler.addNewChallange(challengeNo, challenge);

		final String message = metadata + publicKey + nonce;

		Log.i("message to send", message);


		SendSMS.sendSMSMessage(message, con, challengeNo);

	}

	//2nd step
	static void replyMetadata(String message, Context context,  EncryptionManager encryptionManager, DatabaseHandler dbHandler) throws Exception 
	{
		String metadata = Constants.getMetaData(Constants.HEADER_REPLY_METADATA);
		String _nonce = Constants.getNonce();
		String rep_metadata = metadata + Constants.getPublicKey() + _nonce;

		String[] split = message.split(Constants.separator);

		Log.i("Test Message", message);


		String meta = split[1];
		String pub = split[2];
		String nonce = split[3];


		String encryptMsg = meta + "," + nonce;

		Log.i("This is what is being encrypted here", encryptMsg);
		//encrypt using the user's own public key
		String encoded = null;

		if (encryptionManager == null)
		{
			try 
			{
				SharedPreferences s = Constants.getDefaultSharedPreferences(context);
				encryptionManager = new EncryptionManager( s , "testpassword");

			} catch (ParseException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		try 
		{
			encoded = encryptionManager.encrypt(encryptMsg);
		} catch (UnsupportedEncodingException e) {

			e.printStackTrace();
		}


		Log.i("After encryption", encoded);


		String publicKeyOfSender = Constants.getPublicKey();
		publicKeyOfSender = publicKeyOfSender.replaceFirst(Constants.separator, "");


		rep_metadata += encoded;
		rep_metadata += Constants.separator;

		String[] split2 = meta.split("--");
		String fromNo = split2[0];

		//store challenge with number
		String metaD =  metadata.replaceFirst(Constants.HEADER_REPLY_METADATA+Constants.separator, "");
		String challenge = metaD + "," + _nonce;
		challenge = challenge.replace(Constants.separator, "");

		String challengeNo = fromNo;
		
		if (dbHandler == null)
		{
			dbHandler = new DatabaseHandler(context);
		}
		dbHandler.addNewChallange(challengeNo, challenge);

		//storing keys temp
		dbHandler.AddNewTempKeys(fromNo, pub);

		Log.i("Replying metadata", rep_metadata);
		Log.i("Replying to", fromNo);

		SendSMS.sendSMSMessage(rep_metadata, context, fromNo);

	}

}
