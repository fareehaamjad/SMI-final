package com.example.securemobileidentity;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import android.content.Context;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Vibrator;
import android.telephony.PhoneNumberUtils;
import android.text.format.Time;
import android.util.Log;

public class Constants 
{
	//preferences id strings
	public static String pref_phone_no = "phone number";
	public static String pref_server_no = "server number";
	public static String pref_KEY_imei = "imei";
	public static String pref_private_key = "Private key";
	public static String pref_public_key = "Public key";

	//messages to server
	public static String get_phone_no = "number";

	public static String keywordsSeparator = ":";
	
	/**
	 * Tracks the status of the location updates request. Value changes when the user presses the
	 * Start Updates and Stop Updates buttons.
	 */
	protected static boolean mRequestingLocationUpdates = false;
	public static boolean connectedToGoogleAPI = false; 

	//flags
	public static boolean phone_no_response = false;
	public static boolean exchangeKeysTrying = false;
	public static boolean exchangesuccessful = false;
	public static boolean isChatOpen = false;
	public static boolean isContactListOpen = false;
	public static boolean isAppRunning = false;

	public static ArrayList<String> allServerMsgs;

	public static Contact contactSelected;
	
	public static Message msgRec;
	
	//this array is to be checked after every handshake to see if there are any messages in it!!
	public static ArrayList<Message> unread_unknown = new ArrayList<Message>();
	
	static Vibrator viberate;

	//this is to prevent infinite wait
	static long timeStart = 0;

	//this is for displaying alert dialog or other UI stuff 
	//wherever you are in the app
	public static Context currentContext;

	//protocol
	public static String separator= "`~~`";
	public static String HEADER_METADATA = "meta";
	public static String HEADER_REPLY_METADATA = "rep-meta";
	public static String HEADER_VERIFY_META = "verify-meta";

	public static String HEADER_MESSAGE = "SMI";

	public static final SimpleDateFormat SIMPLE_DATE_FORMAT = new SimpleDateFormat("E M d HH:mm z y");

	public static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("E, dd MMM yyyy");
	public static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm");

	public static EncryptionManager encryptionManager;
	public static DatabaseHandler dbHandler;

	public static enum UserType{ SELF, OTHER };

	//this array list should contain all messages of the opened chat
	public static ArrayList<Message> allMsgs = new ArrayList<Message>();

	// ArrayList for Listview
	public static ArrayList<Contact> allContacts = new ArrayList<Contact>();

	public static Location mGPS = null;


	//to limit number of handshakes per session
	public static ArrayList<Contact> contactsVisited = new ArrayList<Contact>();


	//logging
	public static final String LOGS_DIR 	= "/SMI/Logs/";
	public static String root 				= null;	
	public static final String APP_PACKAGE 			= " com.example.securemobileidentity";




	public static String getNonce() 
	{
		SecureRandom sr = new SecureRandom();
		byte[] _nonce = new byte[1024/8];
		sr.nextBytes(_nonce);

		return (_nonce.toString() + Constants.separator);
	}

	public static String getMetaData(String header) 
	{
		//phone No:
		String metadata = header;
		metadata += Constants.separator;
		metadata += MainActivity.s.getString(Constants.pref_phone_no, null);
		metadata += "--";

		//location
		if(mGPS != null )
		{
			Double mLat = mGPS.getLatitude();
			Double mLong = mGPS.getLongitude();

			metadata += Double.toString(mLat);
			metadata += ":";
			metadata += Double.toString(mLong);
			metadata += "--";
		}
		else
		{
			metadata += "null:null--";
			Log.e("Location", "can't get the location");
		}

		//DateTime
		final Calendar c = Calendar.getInstance();
		int mYear = c.get(Calendar.YEAR);
		int mMonth = c.get(Calendar.MONTH);
		int mDay = c.get(Calendar.DAY_OF_MONTH);
		metadata += mDay+"-"+mMonth+"-"+mYear;
		metadata += ":";

		Time time = new Time();
		time.setToNow();
		metadata += time.hour+":"+time.minute;
		metadata += Constants.separator;

		Log.i("final meta data", metadata);

		return metadata;
	}


	public static String getPublicKey() 
	{
		return (encryptionManager.s.getString(Constants.pref_public_key, null)+Constants.separator);
	}

	public static Contact findContact(String number) 
	{
		Contact c = null;
		for (Contact con : Constants.allContacts)
		{
			if (PhoneNumberUtils.compare(con.number, number))
			{
				c = con;
				break;
			}
		}

		if (c == null)
		{
			c = new Contact(number, number, true);

		}

		return c;
	}

	public static boolean isContactRead(String number)
	{
		Contact c = null;
		for (Contact con : Constants.allContacts)
		{
			if (PhoneNumberUtils.compare(con.number, number))
			{
				return true;
			}
		}

		return false;
	}

	public static void writeToNewLine(Context ctx,String path, String content) 
	{
		File f = new File(path);
		content = "\n\n" +content;

		try {
			FileOutputStream fos = new FileOutputStream(f, true);
			fos.write(content.getBytes());
			fos.close();
		} catch (FileNotFoundException e) {
			Log.e("Crash log", e.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void createDirectories()
	{		
		File logs_dir = new File(Constants.root + Constants.LOGS_DIR);
		Log.i("Logs", Constants.root + Constants.LOGS_DIR);
		if (!logs_dir.exists() && !logs_dir.isDirectory())
		{
			logs_dir.mkdirs();
		}
	}

	public static boolean shouldStartExchange(Contact selContact) 
	{
		for (Contact c: contactsVisited)
		{
			if (PhoneNumberUtils.compare(c.number, selContact.number))
			{
				return false;
			}
		}

		return true;
	}

	public static boolean isAnyUnreadMsg(Contact item) throws ParseException 
	{
		Constants.dbHandler.getAllMessages(item.number);

		for (Message m : Constants.allMsgs)
		{
			if (! m.isRead)
			{
				Constants.allMsgs.clear();
				return true;
			}
		}
		Constants.allMsgs.clear();
		return false;
	}

	public static boolean isSameDate(Date d1, Date d2)
	{
		Calendar cal1 = Calendar.getInstance();
		Calendar cal2 = Calendar.getInstance();
		cal1.setTime(d1);
		cal2.setTime(d2);
		return (cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
				cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
	}


	/**
	 * Gets a SharedPreferences instance that points to the default file that is
	 * used by the preference framework in the given context.
	 * 
	 * @param context The context of the preferences whose values are wanted.
	 * @return A SharedPreferences instance that can be used to retrieve and
	 *         listen to values of the preferences.
	 */
	public static SharedPreferences getDefaultSharedPreferences(Context context) 
	{
		return context.getSharedPreferences(getDefaultSharedPreferencesName(context),
				context.MODE_PRIVATE);
	}

	private static String getDefaultSharedPreferencesName(Context context) {
		return context.getPackageName() + "_preferences";
	}

}
