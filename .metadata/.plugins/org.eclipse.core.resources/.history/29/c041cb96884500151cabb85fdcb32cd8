package com.example.securemobileidentity;

import java.io.IOException;
import java.security.SecureRandom;
import java.util.Calendar;

import org.apache.http.ParseException;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.format.Time;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

public class SMSActivity  extends Activity 
{
	String className = "SMSActivity";

	WaitForKeyExchange mTask = null;

	LinearLayout headerProgress, displayMessage, noOfferMessage, footerLayout;  //buttonsLayout

	TextView name;

	Context context;
	private Handler mHandler;
	
	ListView msgs;


	boolean exchangingKeys = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.sms_activity);

		headerProgress = (LinearLayout) findViewById(R.id.linlaHeaderProgress);
		displayMessage = (LinearLayout) findViewById(R.id.ll_top);
		noOfferMessage = (LinearLayout) findViewById(R.id.ll_displayTextFail);
		//buttonsLayout  = (LinearLayout) findViewById(R.id.ll_ok);
		footerLayout   = (LinearLayout) findViewById(R.id.ll_bottom);
		msgs = (ListView) findViewById(R.id.lv_list_view);
		
		name = (TextView) findViewById(R.id.tv_name);

		name.setText(Constants.contactSelected.getName());

		context = this;
		mHandler = new Handler();

		startExchange();

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) 
	{
		if ( exchangingKeys )
		{
			if (keyCode == KeyEvent.KEYCODE_BACK) 
			{
				//preventing default implementation previous to android.os.Build.VERSION_CODES.ECLAIR
				return true;
			}
			else if (keyCode == KeyEvent.KEYCODE_MENU)
			{
				return true;
			}

		}

		return super.onKeyDown(keyCode, event); 

	}

	private void startExchange() 
	{
		if ( mTask != null ) 
		{
			mTask.cancel(true);
		}

		mTask = (WaitForKeyExchange) new WaitForKeyExchange().execute();
	}

	public void goBack(View v)
	{
		onBackPressed();
	}

	class WaitForKeyExchange extends AsyncTask<String, String, String>
	{



		@Override
		protected void onPreExecute() 
		{    
			// SHOW THE SPINNER WHILE LOADING FEEDS
			exchangingKeys = true;
			headerProgress.setVisibility(View.VISIBLE);
			displayMessage.setVisibility(View.GONE);
			noOfferMessage.setVisibility(View.GONE);
			//buttonsLayout.setVisibility(View.GONE);
			footerLayout.setVisibility(View.GONE);



			super.onPreExecute();
		}


		@Override
		protected String doInBackground(String... arg0) 
		{
			try 
			{	
				if ( !Constants.exchangeKeysTrying )
				{
					exchangeKeys();
				}


				while (Constants.exchangeKeysTrying)
				{
					Thread.sleep(1000);
				}

			} catch (Exception e) 
			{
				e.printStackTrace();
			}



			// TODO Auto-generated method stub
			return null;
		}



		private void exchangeKeys() 
		{
			Constants.exchangeKeysTrying = true;
			//generating nonce
			String nonce = Constants.getNonce();

			//generating meta-data
			String metadata = Constants.getMetaData(Constants.HEADER_METADATA);

			//fetching public key and public modulus
			String publicKey = Constants.getPublicKey();

			//store challenge with number
			String metaD =  metadata.replace(Constants.HEADER_METADATA, "");

			Log.i("meta after replacing", metaD);

			String challenge = metaD + "," + nonce;
			challenge = challenge.replace(Constants.separator, "");



			final String challengeNo = Constants.contactSelected.number;
			Constants.dbHandler.addNewChallange(challengeNo, challenge);

			final String message = metadata + publicKey + nonce;

			Log.i("message to send", message);

			mHandler.post(new Runnable() { // This thread runs in the UI
				@Override
				public void run() {
					SendSMS.sendSMSMessage(message, context, challengeNo);
				}
			});



		}




		@Override
		protected void onPostExecute(String result) 
		{  
			String funcName = "onPostExecute";
			Log.i(className, funcName);

			headerProgress.setVisibility(View.GONE);

			if (!Constants.exchangesuccessful)
			{
				noOfferMessage.setVisibility(View.VISIBLE);
			}
			else
			{
				displayMessage.setVisibility(View.VISIBLE);
				footerLayout.setVisibility(View.VISIBLE);
				
				
				ChatListAdapter adapter = new ChatListAdapter(constants.md_table, Activity_Sessions.this);
				listView.setAdapter(adapter_del);
				
				

			}




			super.onPostExecute(result);

		}


	}

}
