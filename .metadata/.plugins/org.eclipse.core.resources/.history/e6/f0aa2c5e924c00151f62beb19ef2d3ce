package com.example.securemobileidentity;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;


public final class LocationTracker extends Service implements ConnectionCallbacks, OnConnectionFailedListener, LocationListener
{

	protected static final String TAG = "LocationTracker";

	/**
	 * The desired interval for location updates. Inexact. Updates may be more or less frequent.
	 */
	public static final long UPDATE_INTERVAL_IN_MILLISECONDS = 10 * 1000;

	/**
	 * The fastest rate for active location updates. Exact. Updates will never be more frequent
	 * than this value.
	 */
	public static final long FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS =
			UPDATE_INTERVAL_IN_MILLISECONDS / 2;

	// Keys for storing activity state in the Bundle.
	protected final static String REQUESTING_LOCATION_UPDATES_KEY = "requesting-location-updates-key";
	protected final static String LOCATION_KEY = "location-key";
	protected final static String LAST_UPDATED_TIME_STRING_KEY = "last-updated-time-string-key";

	/**
	 * Provides the entry point to Google Play services.
	 */
	protected static GoogleApiClient mGoogleApiClient;

	/**
	 * Stores parameters for requests to the FusedLocationProviderApi.
	 */
	protected static LocationRequest mLocationRequest;

	/**
	 * Represents a geographical location.
	 */
	protected Location mCurrentLocation;

	/**
	 * Tracks the status of the location updates request. Value changes when the user presses the
	 * Start Updates and Stop Updates buttons.
	 */
	protected static Boolean mRequestingLocationUpdates;

	private static LocationListener context;


	@Override
	public void onCreate() 
	{
		super.onCreate();

		mRequestingLocationUpdates = false;

		context = this;

		// Kick off the process of building a GoogleApiClient and requesting the LocationServices
		// API.
		buildGoogleApiClient();
	}

	public static void startLocUpdates()
	{
		if (!mRequestingLocationUpdates) 
		{
			mRequestingLocationUpdates = true;
			startLocationUpdates(LocationTracker.context);
		}
	}

	public static void stopLocUpdates()
	{
		if (mRequestingLocationUpdates) 
		{
			mRequestingLocationUpdates = false;
			stopLocationUpdates(LocationTracker.context);
		}
	}

	@Override
	public void onStart(Intent intent, int startId) 
	{      
		super.onStart(intent, startId);
		mGoogleApiClient.connect();
	}


	/**
	 * Builds a GoogleApiClient. Uses the {@code #addApi} method to request the
	 * LocationServices API.
	 */
	protected synchronized void buildGoogleApiClient() 
	{
		Log.i(TAG, "Building GoogleApiClient");
		mGoogleApiClient = new GoogleApiClient.Builder(this)
		.addConnectionCallbacks(this)
		.addOnConnectionFailedListener(this)
		.addApi(LocationServices.API)
		.build();
		createLocationRequest();
	}

	/**
	 * Sets up the location request. Android has two location request settings:
	 * {@code ACCESS_COARSE_LOCATION} and {@code ACCESS_FINE_LOCATION}. These settings control
	 * the accuracy of the current location. This sample uses ACCESS_FINE_LOCATION, as defined in
	 * the AndroidManifest.xml.
	 * <p/>
	 * When the ACCESS_FINE_LOCATION setting is specified, combined with a fast update
	 * interval (5 seconds), the Fused Location Provider API returns location updates that are
	 * accurate to within a few feet.
	 * <p/>
	 * These settings are appropriate for mapping applications that show real-time location
	 * updates.
	 */
	protected void createLocationRequest() 
	{
		mLocationRequest = new LocationRequest();

		// Sets the desired interval for active location updates. This interval is
		// inexact. You may not receive updates at all if no location sources are available, or
		// you may receive them slower than requested. You may also receive updates faster than
		// requested if other applications are requesting location at a faster interval.
		mLocationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);

		// Sets the fastest rate for active location updates. This interval is exact, and your
		// application will never receive updates faster than this value.
		mLocationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS);

		mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
	}


	/**
	 * Requests location updates from the FusedLocationApi.
	 */
	protected static void startLocationUpdates(LocationListener c) 
	{
		// The final argument to {@code requestLocationUpdates()} is a LocationListener
		// (http://developer.android.com/reference/com/google/android/gms/location/LocationListener.html).
		LocationServices.FusedLocationApi.requestLocationUpdates(
				mGoogleApiClient, mLocationRequest, c);
	}

	/**
	 * Removes location updates from the FusedLocationApi.
	 */
	protected static void stopLocationUpdates(LocationListener c) {
		// It is a good practice to remove location requests when the activity is in a paused or
		// stopped state. Doing so helps battery performance and is especially
		// recommended in applications that request frequent location updates.

		// The final argument to {@code requestLocationUpdates()} is a LocationListener
		// (http://developer.android.com/reference/com/google/android/gms/location/LocationListener.html).
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, c);
	}


	@Override
	public void onDestroy() {       
		// handler.removeCallbacks(sendUpdatesToUI);     
		super.onDestroy();
		Log.v("STOP_SERVICE", "DONE");
		mGoogleApiClient.disconnect();


	}   


	@Override
	public void onLocationChanged(Location location) 
	{
		mCurrentLocation = location;

		Toast.makeText(this, "Loc update", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle connectionHint) 
	{
		Log.i(TAG, "Connected to GoogleApiClient");

		// If the initial location was never previously requested, we use
		// FusedLocationApi.getLastLocation() to get it. If it was previously requested, we store
		// its value in the Bundle and check for it in onCreate(). We
		// do not request it again unless the user specifically requests location updates by pressing
		// the Start Updates button.
		//
		// Because we cache the value of the initial location in the Bundle, it means that if the
		// user launches the activity,
		// moves to a new location, and then changes the device orientation, the original location
		// is displayed as the activity is re-created.
		if (mCurrentLocation == null) {
			mCurrentLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);

		}

		// If the user presses the Start Updates button before GoogleApiClient connects, we set
		// mRequestingLocationUpdates to true (see startUpdatesButtonHandler()). Here, we check
		// the value of mRequestingLocationUpdates and if it is true, we start location updates.
		if (mRequestingLocationUpdates)
		{
			startLocationUpdates(LocationTracker.context);
		}
	}

	@Override
	public void onConnectionSuspended(int cause) 
	{
		// The connection to Google Play services was lost for some reason. We call connect() to
		// attempt to re-establish the connection.
		Log.i(TAG, "Connection suspended");
		mGoogleApiClient.connect();
	}

	@Override
	public void onConnectionFailed(ConnectionResult result)
	{
		// Refer to the javadoc for ConnectionResult to see what error codes might be returned in
		// onConnectionFailed.
		Log.i(TAG, "Connection failed: ConnectionResult.getErrorCode() = " + result.getErrorCode());
	}


	@Override
	public IBinder onBind(Intent intent) 
	{
		return null;
	}

}